// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /daily)
	AddDaily(ctx echo.Context) error

	// (GET /daily/{id})
	GetDaily(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddDaily converts echo context to params.
func (w *ServerInterfaceWrapper) AddDaily(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddDaily(ctx)
	return err
}

// GetDaily converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaily(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaily(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/daily", wrapper.AddDaily)
	router.GET(baseURL+"/daily/:id", wrapper.GetDaily)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xUT28bRRT/KqMHB5CWXZPc9kQoURWEaEV6q3J43X22p/XODDNvk0aWJWzzTxTBoVJz",
	"QBVE4gARVKoQEqQo/TBTp/0YaGa9sd0YcUGcevLo+f35/Xn7hlDoymhFih3kQ3BFnyqMz/dQDg7Dw1ht",
	"yLKkGC6RKfx2ta2QIW8CCfChIcjBsZWqB6MEqEI5WMlsImtSZRny5mGpmHpkQ5zR3YlDJVMVH69b6kIO",
	"r2UL2Nkcc3YD3Z1Y1fRBa/EQRqMELH1cS0sl5DcvMETUexfJ+tZtKjhUb1ur7WXahS5XaUvFmxsLMkuo",
	"K3IOe7REqWX6EpbYc5G/Dk3kdAlMX9d2BUx3oJEXYFRd3WqwGKtjq3wIpOoqTI1asrZh9PMfz2aff/ZG",
	"xb3sxcnT8++f+PGJH//8JiRw9Qok4McP/fjRsycP4vsrPz7yk3t+fB8SOH/4+NnpL3567Kdf+umvkMD7",
	"H23FtN/95Gs/nvjxp3564ienfvqDn37ip7/5yZ9h5nd/nP90PHt87/nZNy+O789Oj5aY/4NSLY2koX5Z",
	"qVAgVVc3VinGOedmBwGNZMLqHXeAvR7ZVGpIQGEVWuw2MbF1fUfcIKwggdqGoj6zybNsqWaUQEmusNKw",
	"1Apy2BIOKzOgWMx9ZFE7cgKFIY4aC3QClaC7TRprUVKllWOLTKJLyLUlJ6QS3CdxzZAKnTbTjnCGCtmV",
	"BcZRCQxkQcrFrZoD3zJY9ElspJ0VyC7PsoODgxTj36m2vWxe67IPdq5sf7i7/dZG2kn7XA3i50K2cte6",
	"u2T3ZUHreGcxJQv7JXmwrNn1OU1IYJ+sa0R5O+2kndBZG1JoJOSwGUMJGOR+3OCsvLgu2kWrVoXFshQl",
	"MkLsYqMIO2UgXZbNYWoWhBy/q8vD1nZSsRcaM5grl912oWF72f7thjS94zqtAop4g38BGetoV0t9sals",
	"a4qr64wOgodxG53O/wWvndssahfrAf9no5u7uGZ0reiuoYKpFNTmjJK5w9lQlqPQukdrXO4Rr3f5KnHr",
	"skGLFTFZB/nN4TrafvqFn/7lJ0/9+NHs2wezsyMIxwDyuG6LD12Wl7xKlsi/fMhHe6+MjFmO7H4r/8pl",
	"bI9cunQqwvc+2hv9HQAA//+NbUi2WAgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

