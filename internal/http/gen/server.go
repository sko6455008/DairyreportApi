// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /daily)
	FindDaily(ctx echo.Context, params FindDailyParams) error

	// (POST /daily)
	AddDaily(ctx echo.Context) error

	// (GET /daily/{id})
	FindDailyById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindDaily converts echo context to params.
func (w *ServerInterfaceWrapper) FindDaily(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindDailyParams
	// ------------- Optional query parameter "asc" -------------

	err = runtime.BindQueryParameter("form", true, false, "asc", ctx.QueryParams(), &params.Asc)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asc: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindDaily(ctx, params)
	return err
}

// AddDaily converts echo context to params.
func (w *ServerInterfaceWrapper) AddDaily(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddDaily(ctx)
	return err
}

// FindDailyById converts echo context to params.
func (w *ServerInterfaceWrapper) FindDailyById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindDailyById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/daily", wrapper.FindDaily)
	router.POST(baseURL+"/daily", wrapper.AddDaily)
	router.GET(baseURL+"/daily/:id", wrapper.FindDailyById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xVT08USxD/KqTeO07YffDiYW4QNeGi3skemunapXGmu+nuVTebOcxiWCMmGBJAjYkc",
	"DIkxIZy8KPJhmt3gtzDdvX9YZgGNHjy4h81sTdWvflX1q9o2JCKTgiM3GuI26GQVM+IfbxOWttwDSdP7",
	"dYiX2/CvwjrE8E9lHFQZRFTu4eMQkUdtkEpIVIahR2LUfdeFyoiBGBg3t/6HCExLYviJDVSQ5xEoXG8y",
	"hRTiZRdVGzmJlTVMDOS1PII7SgnlECezJILi5Tzzc1PyRJCh1qThvQcvtVGMN0ocPObYv8wnglHdJUKU",
	"mGkpIsCMsHSCarBEZVdD9MPQQ4OZnoo2MBClSKtUwBDYcxnClctwYYzXhaeNOlFMGiY4xEEFMwsPllw0",
	"M6mLos62IBlE8AiVDo7/zVZnq46PkMiJZBDDvDdFIIlZ9dwrdNipBppyLv/WdnbO33f7u8e97b3e133w",
	"gIo4lyUKMdxlnIaGO2BFMjSotJfnJFr/VffbwaYtPtrite1s2WLLFh9ssWmLLXDVQgzrTVQOh5PMt1An",
	"EA1W4EKrV4RIkXDX28s5AseQ4Ozzp/7u8RXQKcuYmQC/UaZ5zY1SS8F10NNctRp0zg1y3z4iZcoS35vK",
	"mnaM2hcyjCRz3doOd/ayjPJo2nBmhoTAv6+TZmp+itN1VMJeT0nd5PhEYmKQzuDYRwp9pYaKo/7e8fnh",
	"9tnJ2/6zlyUNLdCRhNyyoDaLgrZ+WyHjU1iu5fz0pPf8ICiGXuAQFtaoJua/OPYfmPYfP908GtyKSpvR",
	"/JqDYYjt7DBqOzv9F93e0Rtb7Nvi8KbTsdhaojedj+Fq79vinS2e2o2u3fhiO6e2OGJ0uOXuso2X3Nsn",
	"h3nVxk//A6z9Hb37fA8AAP//krtZ1JUIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

